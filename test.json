[
{"url": "https://github.com/marimo-team/marimo/discussions/3277", "lang": "Python", "question": "How to print the name of a file uploaded via a button?\n\nAs shown below, I have two questions:\r\n\r\n1. how to access the `value` of the file updated via the button created in the first cell? \r\n\r\n2. Why there's no button for file uploading after running the second cell?\r\n\r\n![image](https://github.com/user-attachments/assets/10d43b71-819d-40e4-aac8-2405434f38d4)\r\n", "answer": "@hopezh , you have to assign UI elements to global variables and output the global variable. Your displayed button doesn't have an associated variable so it doesn't work.\r\n\r\nYou also need to end the cell with `f` in order to display the button.\r\n\r\nTry this instead: https://github.com/marimo-team/marimo/blob/main/examples/ui/file.py\r\n\r\nTip: You can run this notebook with\r\n\r\n```\r\nmarimo edit https://github.com/marimo-team/marimo/blob/main/examples/ui/file.py\r\n```\r\n\r\nat the command line.\r\n\r\n![image](https://github.com/user-attachments/assets/1d20eb54-0bfc-4639-b809-f79890a512c5)\r\n\r\nFor many more examples, see: https://github.com/marimo-team/marimo/tree/main/examples\r\n\r\nFor a tutorial on using UI widgets please run: `marimo tutorial ui` at the command-line.\r\n", "category": "<SWE_KNOWLEDGE>", "knowledge": "- Assign UI elements to global variables\n    - Output the global variable\n    - End the cell with `f` to display the button\n    - Use `marimo edit [file_path]` to run a notebook from the command line\n    - Use `marimo tutorial ui` for a tutorial on using UI widgets", "code": "", "createdAt": "2024-12-20T07:14:03Z"}
,{"url": "https://github.com/marimo-team/marimo/discussions/3277", "lang": "Python", "question": "How to change a dropdown's options based on a text field?\n\nI tried to update a dropdown's options by the following code, but it does not work. Is this currently supported? Thanks.\r\n\r\n```python\r\nget_generic_name, set_generic_name = mo.state(\"\")\r\nget_specifications, set_specifications = mo.state([])\r\nget_specification, set_specification = mo.state(\"\")\r\n\r\ndef get_distinct_specifications(generic_name: str, *, uri: str) -> list[str]:\r\n    if not generic_name:\r\n        return []\r\n\r\n    query = f\"\"\"select distinct(specification)\r\nfrom drug_dosage_admin \r\nwhere generic_name REGEXP '^{re.escape(generic_name)}';\"\"\"\r\n\r\n    df = pl.read_database_uri(query, uri=uri)\r\n\r\n    return sorted(set(df[\"specification\"].to_list()))\r\n\r\n\r\ndef on_generic_name_change(generic_name: str):\r\n    set_generic_name(generic_name)\r\n    set_specifications(\r\n        lambda _: get_distinct_specifications(get_generic_name(), uri=database_url)\r\n    )\r\n\r\n    specification.options = get_specifications()\r\n\r\n\r\ngeneric_name = mo.ui.text(\r\n    get_generic_name(),\r\n    placeholder=\"e.g. 布洛芬缓释片\",\r\n    label=\"通用名\",\r\n    on_change=on_generic_name_change,\r\n)\r\nspecification = mo.ui.dropdown(\r\n    get_specifications(),\r\n    value=None,\r\n    label=\"规格\",\r\n    on_change=set_specification,\r\n)\r\n\r\nmo.hstack([generic_name, specification], justify=\"start\")\r\n```", "answer": "**Don't use `mo.state()`, and don't use `on_change` handlers. They should be used exceedingly rarely, and almost always lead to trouble.**\r\n\r\nYou need to use marimo's built-in reactivity. Run `marimo tutorial ui` to understand how this works or read our docs.\r\n\r\nHere is an example:  ![image](https://github.com/user-attachments/assets/3ac437e7-3ba1-4d1e-8341-c411597b41fa)\r\n\r\nNotebook link: https://marimo.app/l/vfwyu0\r\n\r\nOut of curiosity, how and why did you decide to use `mo.state` and `on_change`? I would really strongly like to discourage users from doing this.\r\n\r\n", "category": "<SWE_KNOWLEDGE>", "knowledge": "- Don't use `mo.state()` and `on_change` handlers in marimo\n    - Use marimo's built-in reactivity instead\n    - Run `marimo tutorial ui` to understand how reactivity works", "code": "", "createdAt": "2024-12-17T15:18:28Z"}
]
